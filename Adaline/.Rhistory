par(new=T)
plot(X,yaprox,col='red',xlim=c(-15,10),ylim=c(-20,100))
par(new=T)
plot(xgrid,Yaprox,col='red',type='l',xlim=c(-15,10),ylim=c(-20,100))
rm(list = ls())
Trainadaline <- function(X,y,eta,tol,maxepocas,par)
{
dimX <- dim(X) # dim(X) = a um vetor[numero de linhas, numero de colunas]
N <- dimX[1]
n <- dimX[2]
if(par==1){
w <- as.matrix(runif(n+1)-0.5)
X <- cbind(1,X)
}
else{
w <- as.matrix(runif(n)-0.5)
}
nepocas <- 0
eepoca <- tol+1
evec <- matrix(nrow=1,ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca > tol))
{
ei2 <- 0
xseq <-sample(N)
for (i in 1:N)
{
irand <- xseq[i]
yhati <- 1.0*((X[irand,]%*%w))
ei <- y[irand]-yhati
dw <- eta*ei*X[irand,]
w <- w +dw
ei2 <- ei2+ei*ei
}
nepocas <- nepocas+1
evec[nepocas] <- ei2/N
eepoca <- evec[nepocas]
}
retlist<-list(w,evec[1:nepocas])
return(retlist)
}
# Lendo os dados dos arquivos
t<-read.table("Ex1_t")
x<-read.table("Ex1_x")
y<-read.table("Ex1_y")
# transformando os dados em tipo matrix
tin <- as.matrix(t)
xin <- as.matrix(x)
yin <- as.matrix(y)
# pegando indices aleatorios do vetor
#index <- sample(NROW(xin)*0.7)
index <- sample(NROW(xin)) # indices aleatorios do vetor
index70 <- index[1:round(0.7*length(index)-1)] # primeiros 70% numeros do index
index30 <- index[round(0.7*length(index)):length(index)] # ultimos 30% numeros do index
# ultilizando os indices aleatorios para embaralhar as posicoes dos dados
x <- xin[index70,]
x <- as.matrix(x)
xteste <- xin[index30,]
xteste <- as.matrix(xteste)
#x[index[round(0.7*length(index))]]
# Y INDEX
y <- yin[index70,]
y <- as.matrix(y)
yteste <- yin[index30,]
yteste <- as.matrix(yteste)
# t INDEX
t <- tin[index70,]
t <- as.matrix(t)
t_teste <- tin[index30,]
t_teste <- as.matrix(t_teste)
Resul <- Trainadaline(x,y,0.001,0.001,1000,1)
H <- cbind(1,x) # a + bx
w <- Resul[[1]]
w <- as.matrix(w) # pesos aproximados
yaprox = H %*% w # funcao aproximada
plot(t,yaprox,col='red',xlim=c(0,7),ylim=c(0,1))
par(new=T)
plot(t_teste,yteste,col='blue',xlim=c(0,7),ylim=c(0,1))
#Erro quadratico médio
N <- length(yteste)
Erro = y-yaprox
Erro = Erro^2
Erro2 = 0
for (i in 1:N)
{
Erro2 <- Erro2+ Erro[i]
}
Erro2 = Erro2/N
print(paste('O erro quadratico é:',Erro2))
##########################
#ret[[1]][1]
# t<- matrix(seq(0,2*pi,0.1*pi),ncol=1)
# x<-sin(t)
# y<-matrix(4*x+2,ncol=1)
setwd("~/2018-02/Redes Neurais/Exercicio3")
rm(list = ls())
Trainadaline <- function(X,y,eta,tol,maxepocas,par)
{
dimX <- dim(X) # dim(X) = a um vetor[numero de linhas, numero de colunas]
N <- dimX[1]
n <- dimX[2]
if(par==1){
w <- as.matrix(runif(n+1)-0.5)
X <- cbind(1,X)
}
else{
w <- as.matrix(runif(n)-0.5)
}
nepocas <- 0
eepoca <- tol+1
evec <- matrix(nrow=1,ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca > tol))
{
ei2 <- 0
xseq <-sample(N)
for (i in 1:N)
{
irand <- xseq[i]
yhati <- 1.0*((X[irand,]%*%w))
ei <- y[irand]-yhati
dw <- eta*ei*X[irand,]
w <- w +dw
ei2 <- ei2+ei*ei
}
nepocas <- nepocas+1
evec[nepocas] <- ei2/N
eepoca <- evec[nepocas]
}
retlist<-list(w,evec[1:nepocas])
return(retlist)
}
# Lendo os dados dos arquivos
t<-read.table("Ex1_t")
x<-read.table("Ex1_x")
y<-read.table("Ex1_y")
# transformando os dados em tipo matrix
tin <- as.matrix(t)
xin <- as.matrix(x)
yin <- as.matrix(y)
# pegando indices aleatorios do vetor
#index <- sample(NROW(xin)*0.7)
index <- sample(NROW(xin)) # indices aleatorios do vetor
index70 <- index[1:round(0.7*length(index)-1)] # primeiros 70% numeros do index
index30 <- index[round(0.7*length(index)):length(index)] # ultimos 30% numeros do index
# ultilizando os indices aleatorios para embaralhar as posicoes dos dados
x <- xin[index70,]
x <- as.matrix(x)
xteste <- xin[index30,]
xteste <- as.matrix(xteste)
#x[index[round(0.7*length(index))]]
# Y INDEX
y <- yin[index70,]
y <- as.matrix(y)
yteste <- yin[index30,]
yteste <- as.matrix(yteste)
# t INDEX
t <- tin[index70,]
t <- as.matrix(t)
t_teste <- tin[index30,]
t_teste <- as.matrix(t_teste)
Resul <- Trainadaline(x,y,0.001,0.001,1000,1)
H <- cbind(1,x) # a + bx
w <- Resul[[1]]
w <- as.matrix(w) # pesos aproximados
yaprox = H %*% w # funcao aproximada
plot(t,yaprox,col='red',xlim=c(0,7),ylim=c(0,1))
par(new=T)
plot(t_teste,yteste,col='blue',xlim=c(0,7),ylim=c(0,1))
#Erro quadratico médio
N <- length(yteste)
Erro = y-yaprox
Erro = Erro^2
Erro2 = 0
for (i in 1:N)
{
Erro2 <- Erro2+ Erro[i]
}
Erro2 = Erro2/N
print(paste('O erro quadratico é:',Erro2))
##########################
#ret[[1]][1]
# t<- matrix(seq(0,2*pi,0.1*pi),ncol=1)
# x<-sin(t)
# y<-matrix(4*x+2,ncol=1)
rm(list = ls())
Trainadaline <- function(X,y,eta,tol,maxepocas,par)
{
dimX <- dim(X) # dim(X) = a um vetor[numero de linhas, numero de colunas]
N <- dimX[1]
n <- dimX[2]
if(par==1){
w <- as.matrix(runif(n+1)-0.5)
X <- cbind(1,X)
}
else{
w <- as.matrix(runif(n)-0.5)
}
nepocas <- 0
eepoca <- tol+1
evec <- matrix(nrow=1,ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca > tol))
{
ei2 <- 0
xseq <-sample(N)
for (i in 1:N)
{
irand <- xseq[i]
yhati <- 1.0*((X[irand,]%*%w))
ei <- y[irand]-yhati
dw <- eta*ei*X[irand,]
w <- w +dw
ei2 <- ei2+ei*ei
}
nepocas <- nepocas+1
evec[nepocas] <- ei2/N
eepoca <- evec[nepocas]
}
retlist<-list(w,evec[1:nepocas])
return(retlist)
}
# Lendo os dados dos arquivos
t<-read.table("Ex1_t")
x<-read.table("Ex1_x")
y<-read.table("Ex1_y")
# transformando os dados em tipo matrix
tin <- as.matrix(t)
xin <- as.matrix(x)
yin <- as.matrix(y)
# pegando indices aleatorios do vetor
#index <- sample(NROW(xin)*0.7)
index <- sample(NROW(xin)) # indices aleatorios do vetor
index70 <- index[1:round(0.7*length(index)-1)] # primeiros 70% numeros do index
index30 <- index[round(0.7*length(index)):length(index)] # ultimos 30% numeros do index
# ultilizando os indices aleatorios para embaralhar as posicoes dos dados
x <- xin[index70,]
x <- as.matrix(x)
xteste <- xin[index30,]
xteste <- as.matrix(xteste)
#x[index[round(0.7*length(index))]]
# Y INDEX
y <- yin[index70,]
y <- as.matrix(y)
yteste <- yin[index30,]
yteste <- as.matrix(yteste)
# t INDEX
t <- tin[index70,]
t <- as.matrix(t)
t_teste <- tin[index30,]
t_teste <- as.matrix(t_teste)
Resul <- Trainadaline(x,y,0.001,0.001,1000,1)
H <- cbind(1,x) # a + bx
w <- Resul[[1]]
w <- as.matrix(w) # pesos aproximados
yaprox = H %*% w # funcao aproximada
plot(t,yaprox,col='red',xlim=c(0,7),ylim=c(0,1))
par(new=T)
plot(t_teste,yteste,col='blue',xlim=c(0,7),ylim=c(0,1))
#Erro quadratico médio
N <- length(yteste)
Erro = y-yaprox
Erro = Erro^2
Erro2 = 0
for (i in 1:N)
{
Erro2 <- Erro2+ Erro[i]
}
Erro2 = Erro2/N
print(paste('O erro quadratico é:',Erro2))
##########################
#ret[[1]][1]
# t<- matrix(seq(0,2*pi,0.1*pi),ncol=1)
# x<-sin(t)
# y<-matrix(4*x+2,ncol=1)
w <- as.matrix(runif(n)-0.5)
w <- as.matrix(runif(10)-0.5)
w
rm(list=ls())
library('plot3D')
xc1<-matrix(0.3*rnorm(60)+2,ncol=2)
xc2<-matrix(0.3*rnorm(60)+4,ncol=2)
plot(xc1[,1],xc1[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'blue')
par(new=TRUE)
plot(xc2[,1],xc2[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'red')
seqx1x2 <- seq(0,6,0.2)
npgrid <- length(seqx1x2)
M<- matrix(nrow=npgrid, ncol=npgrid)
ci <-0
w<- as.matrix(c(6,1,1))
for(x1 in seqx1x2)
{
ci <- ci+1
cj <-0
for(x2 in seqx1x2)
{
cj<- cj+1
xin<- as.matrix(cbind(-1,x1,x2))
M[ci,cj]<- 1.0*((xin%*%w)>=0)
}
}
ribbon3D(seqx1x2,seqx1x2,xlim=c(0,6),ylim=c(0,6),M,colkey = F)
scatter3D(xc1[,1],xc1[,2],matrix(0, nrow=dim(xc1)[1]),add=T,col='blue',colkey=F)
scatter3D(xc2[,1],xc2[,2],matrix(0, nrow=dim(xc1)[1]),add=T,col='red',colkey=F)
rm(list=ls())
library('plot3D')
xc1<-matrix(0.3*rnorm(60)+2,ncol=2)
xc2<-matrix(0.3*rnorm(60)+4,ncol=2)
plot(xc1[,1],xc1[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'blue')
par(new=TRUE)
plot(xc2[,1],xc2[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'red')
seqx1x2 <- seq(0,6,0.2)
npgrid <- length(seqx1x2)
M<- matrix(nrow=npgrid, ncol=npgrid)
ci <-0
w<- as.matrix(c(6,1,1))
for(x1 in seqx1x2)
{
ci <- ci+1
cj <-0
for(x2 in seqx1x2)
{
cj<- cj+1
xin<- as.matrix(cbind(-1,x1,x2))
M[ci,cj]<- 1.0*((xin%*%w)>=0)
}
}
par(new=TRUE)
contour(seqx1x2,seqx1x2,M,xlim=c(0,6),ylim=c(0,6))
rm(list=ls())
Trainperception <- function(X,y,eta,tol,maxepocas,par)
{
dimX <- dim(X) # dim(X) = a um vetor[numero de linhas, numero de colunas]
N <- dimX[1]
n <- dimX[2]
if(par==1){
w <- as.matrix(runif(n+1)-0.5)
X <- cbind(1,X)
}
else{
w <- as.matrix(runif(n)-0.5)
}
nepocas <- 0
eepoca <- tol+1
evec <- matrix(nrow=1,ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca > tol))
{
ei2 <- 0
xseq <-sample(N)
for (i in 1:N)
{
irand <- xseq[i]
yhati <- 1.0*((X[irand,]%*%w) >= 0) # 1
ei <- y[irand]-yhati
dw <- eta*ei*X[irand,]
w <- w +dw
ei2 <- ei2+ei*ei
}
nepocas <- nepocas+1
evec[nepocas] <- ei2/N
eepoca <- evec[nepocas]
}
retlist<-list(w,evec[1:nepocas])
return(retlist)
}
# Abrindo a Matrix de dados
data("iris")
# Separando os dois grupos de flores
x1<-as.matrix(iris[1:50,1:4])
x2<-as.matrix(iris[51:100,1:4])
#index <- sample(NROW(xin)*0.7)
index <- sample(NROW(x1)) # indices aleatorios do vetor
index70 <- index[1:round(0.7*length(index)-1)] # primeiros 70% numeros do index
index30 <- index[round(0.7*length(index)):length(index)] # ultimos 30% numeros do index
# Classe 1 separacao de dados de teste e treino
xc1 <- x1[index70,]
xteste1 <- x1[index30,]
xc2 <- x2[index70,]
xteste2 <- x2[index30,]
seqx1x2 <- seq(0,6,0.2)
npgrid <- length(seqx1x2)
x <- rbind(xc1,xc2)
xteste <- rbind(xteste1,xteste2)
y1 <- as.matrix(rep(0,50))
y2 <- as.matrix(rep(1,50))
yc1 <- as.matrix(y1[index70,])
yc2 <- as.matrix(y2[index70,])
yteste1 <- as.matrix(y1[index30,])
yteste2 <- as.matrix(y2[index30,])
y <- rbind(yc1,yc2)
yteste <- rbind(yteste1,yteste2)
##################################
H <- as.matrix(cbind(1,xteste))
erro2 <- vector(mode = "integer",length = 100)
acuracia <- 0
for(i in 1:100) {
Resul <-  Trainperception(x,y,0.001,0.001,1000,1)
w <- Resul[[1]]
yhat <- 1.0*((H%*%w)>=0)
erro <- yteste - yhat
erro2[i] <- sum(erro^2)
d <- table(yteste,yhat)
acuracia <- (sum(diag(d))/sum(d))+acuracia
}
N <- length(erro2)
plot(erro2, col = "red")
acuracia <- acuracia/100
varianca <- (erro2-sum(erro2)/N)^2
varianca <- sqrt(sum(varianca)/N)
print(varianca)
print(acuracia)
rm(list=ls())
Trainperception <- function(X,y,eta,tol,maxepocas,par)
{
dimX <- dim(X) # dim(X) = a um vetor[numero de linhas, numero de colunas]
N <- dimX[1]
n <- dimX[2]
if(par==1){
w <- as.matrix(runif(n+1)-0.5)
X <- cbind(1,X)
}
else{
w <- as.matrix(runif(n)-0.5)
}
nepocas <- 0
eepoca <- tol+1
evec <- matrix(nrow=1,ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca > tol))
{
ei2 <- 0
xseq <-sample(N)
for (i in 1:N)
{
irand <- xseq[i]
yhati <- 1.0*((X[irand,]%*%w) >= 0) # 1
ei <- y[irand]-yhati
dw <- eta*ei*X[irand,]
w <- w +dw
ei2 <- ei2+ei*ei
}
nepocas <- nepocas+1
evec[nepocas] <- ei2/N
eepoca <- evec[nepocas]
}
retlist<-list(w,evec[1:nepocas])
return(retlist)
}
# Abrindo a Matrix de dados
data("iris")
# Separando os dois grupos de flores
x1<-as.matrix(iris[1:50,1:4])
x2<-as.matrix(iris[51:100,1:4])
#index <- sample(NROW(xin)*0.7)
index <- sample(NROW(x1)) # indices aleatorios do vetor
index70 <- index[1:round(0.7*length(index)-1)] # primeiros 70% numeros do index
index30 <- index[round(0.7*length(index)):length(index)] # ultimos 30% numeros do index
# Classe 1 separacao de dados de teste e treino
xc1 <- x1[index70,]
xteste1 <- x1[index30,]
xc2 <- x2[index70,]
xteste2 <- x2[index30,]
seqx1x2 <- seq(0,6,0.2)
npgrid <- length(seqx1x2)
x <- rbind(xc1,xc2)
xteste <- rbind(xteste1,xteste2)
y1 <- as.matrix(rep(0,50))
y2 <- as.matrix(rep(1,50))
yc1 <- as.matrix(y1[index70,])
yc2 <- as.matrix(y2[index70,])
yteste1 <- as.matrix(y1[index30,])
yteste2 <- as.matrix(y2[index30,])
y <- rbind(yc1,yc2)
yteste <- rbind(yteste1,yteste2)
##################################
H <- as.matrix(cbind(1,xteste))
erro2 <- vector(mode = "integer",length = 100)
acuracia <- 0
Resul <-  Trainperception(x,y,0.001,0.001,1000,1)
w <- Resul[[1]]
yhat <- 1.0*((H%*%w)>=0)
yhat
rm(list=ls())
library("corpcor")
library('plot3D')
xc1 <- matrix(0.3*rnorm(60)+2,ncol=2)
xc2 <- matrix(0.3*rnorm(60)+4,ncol=2)
xc3 <- cbind(xc1[,1],xc2[,2])
xc4 <- cbind(xc2[,1],xc1[,2])
plot(xc1[,1],xc1[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'red')
par(new=TRUE)
plot(xc2[,1],xc2[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'red')
par(new=TRUE)
plot(xc3[,1],xc3[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'purple')
par(new=TRUE)
plot(xc4[,1],xc4[,2],xlim=c(0,6),ylim=c(0,6),xlab='x1',ylab ='x2',col= 'purple')
X <- rbind(xc1,xc2,xc3,xc4)
y1 <- matrix(-1,nrow = 60,ncol = 1)
y2 <- matrix(1,nrow = 60,ncol = 1)
Y <- rbind(y1,y2)
p <- 20
Z <- replicate(p,runif(3,-0.5,0.5))
Z
dim(Z)
dim(X)
Xaug<-cbind(1,X)
dim(Xaug)
H
# H = xZ
H <- tanh(Xaug%*%Z)
# W <- H+Y
w <- pseudoinverse(H)%*%Y
# Yhat <- Hw
yhat <- sign(H%*%w)
erro <- sum(Y-yhat)
erro2 <- sum(erro^2)/length(erro)
